import{_ as i,c as a,o as n,aF as l}from"./chunks/framework.C55eKXND.js";const o=JSON.parse(`{"title":"API Reference","description":"","frontmatter":{"title":"API Reference","subtitle":"An overview of OpenRouter's API","headline":"OpenRouter API Reference | Complete API Documentation","canonical-url":"https://zenmux.ai/docs/api-reference/overview","og:site_name":"OpenRouter Documentation","og:title":"OpenRouter API Reference - Complete Documentation","og:description":"Comprehensive guide to OpenRouter's API. Learn about request/response schemas, authentication, parameters, and integration with multiple AI model providers.","og:image":{"type":"url","value":"https://zenmux.ai/dynamic-og?title=OpenRouter%20API%20Reference&description=Comprehensive%20guide%20to%20OpenRouter's%20API."},"og:image:width":1200,"og:image:height":630,"twitter:card":"summary_large_image","twitter:site":"@OpenRouterAI","noindex":false,"nofollow":false},"headers":[],"relativePath":"api/overview.md","content":"","filePath":"api/overview.md"}`),t={name:"api/overview.md"};function h(p,s,e,k,g,d){return n(),a("div",null,s[0]||(s[0]=[l("",39)]))}const c=i(t,[["render",h]]);export{o as __pageData,c as default};
